<!DOCTYPE html>
<html>
<head>
<style>
textarea {
}
</style>
</head>
<body>

<h1>Optimizer (Rewrite Array Accesses)</h1>

<p>source:</p>
<textarea id="src" rows="7" cols="90" placeholder="src" style="background-color:oldlace;">
:const cache :to :arr 0 , 1 :end
:fn fibonacci num :do
  :if cache :of length > num :do
    :return cache :of at :call num :end
  :end
  :return fibonacci :call num :sub 1 :end :add fibonacci :call sum :sub 2 :end
:end
</textarea>


<p>output:</p>
<textarea id="output" rows="7" cols="90" placeholder="transpiled"  readonly style="background-color:whitesmoke;">
</textarea>
<br>
<br>
<p id="status" > READY </p>
<br>
<button onclick="baseline ()">Test</button>
<br>
<br>
<br>
<hr>
<p>detailed layer...</p>
<p>macro grammar and re-formatter and generated JavaScript semantics (for Ohm-JS):</p>
<textarea id="macrogrammar" rows="13" cols="40" placeholder="macro grammar" style="background-color:oldlace;">
Keywords {
main = 
  | keyword main?    -- withnum
  | stuff+ main? -- withoutnum
keyword = 
  | "RETURN" &separator -- return
  | "CONST" &separator -- const
  | "ZERO" &separator -- zero
  | "CALL" &separator -- call
  | "ARR" &separator -- arr
  | "END" &separator -- end
  | "ONE" &separator -- one
  | "TWO" &separator -- two
  | "SEP" &separator -- sep
  | "SUB" &separator -- sub
  | "ADD" &separator -- add
  | "TO" &separator -- to
  | "GT" &separator -- gt
  | "DO" &separator -- do
  | "IF" &separator -- if
  | "OF" &separator -- of
  | "FN" &separator -- fn

separator = space | end
stuff = ~keyword any
}
</textarea>
<textarea id="macrofmt" rows="13" cols="40" placeholder="macro fmt" style="background-color:oldlace;">
main_withnum [num @more] = [[~{num}~{more}]]
main_withoutnum [@stuff @more] = [[~{stuff}~{more}]]
keyword_zero [word lookahead] = [[0]]
keyword_one [word lookahead] = [[1]]
keyword_two [word lookahead] = [[2]]
keyword_sep [word lookahead] = [[,]]
keyword_gt [word lookahead] = [[>]]
keyword_const [word lookahead] = [[:const]]
keyword_to [word lookahead] = [[:to]]
keyword_arr [word lookahead] = [[:arr]]
keyword_end [word lookahead] = [[:end]]
keyword_do [word lookahead] = [[:do]]
keyword_if [word lookahead] = [[:if]]
keyword_return [word lookahead] = [[:return]]
keyword_of [word lookahead] = [[:of]]
keyword_fn [word lookahead] = [[:fn]]
keyword_call [word lookahead] = [[:call]]
keyword_sub [word lookahead] = [[:sub]]
keyword_add [word lookahead] = [[:add]]
separator [x] = [[~{x}]]
stuff [c] = [[~{c}]]
</textarea>
</textarea>
<textarea id="semjs" rows="13" cols="40" placeholder="generated JS semantics" style="background-color:whitesmoke;">
</textarea>

<!-- Ohm-JS -->
<script src="https://unpkg.com/ohm-js@16/dist/ohm.min.js"></script>


<!-- Macro preprocessor -->
<script src="mac.js"></script>


<script>
  function fixup (s) {
      return s
          .replace (/~{/g, '${');
  }

  function baseline () {
      let src = document.getElementById('src').value;
      // for debugging fmt specifications, see ../fmt shorthand transpiler
      try {
          var grammar = document.getElementById('macrogrammar').value;
          var fmt = document.getElementById('macrofmt').value;
          let [success, expanded, jssemantics] = expand1 (src, grammar, fmt, fixup);
          document.getElementById('output').value = expanded;
          if (success) {
              document.getElementById('status').value = "OK " + Date ();
              document.getElementById('semjs').value = jssemantics;
          } else {
              document.getElementById('status').value = "FAILED " + Date ();
          }
      } catch (err) {
          document.getElementById('status').value = "parse FAILED: " + err.message + Date ();
      }
  }

  </script>
</body>
</html>


